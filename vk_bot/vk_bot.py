import os

import pytz
from actions.search import prep_and_group_search, aud_search
from tools.state import SuperStates
from vkbottle.bot import Bot, Message

from actions import commands
from actions.main_menu import reminders, main_menu, schedule
from actions.registration import teacher_registration, student_registration
from tools import statistics
from tools.storage import MongodbService

TOKEN = os.environ.get('VK')

storage = MongodbService().get_instance()
bot = Bot(TOKEN)  # TOKEN

content_schedule = {
    'text': ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì', '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè', '–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é',
             '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
             '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé', '–°–ª–µ–¥—É—é—â–∞—è', '–¢–µ–∫—É—â–∞—è']}

content_commands = {'text': ['–ù–∞—á–∞—Ç—å', '–Ω–∞—á–∞—Ç—å', '–ù–∞—á–∞–ª–æ', 'start', 'Start', '–°—Ç–∞—Ä—Ç', '—Å—Ç–∞—Ä—Ç']}

content_main_menu_buttons = {'text': ['–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', '<==–ù–∞–∑–∞–¥', '–î—Ä—É–≥–æ–µ ‚ö°', '–ü–æ–∏—Å–∫ üîé']}

content_reminders = {'text': ['–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô', '-', '+', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å']}

content_map = {'text': ['map', '–ö–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç–∞', 'Map', '–°—Ö–µ–º–∞', '—Å—Ö–µ–º–∞']}

TZ_IRKUTSK = pytz.timezone('Asia/Irkutsk')

map_image = "photo-198983266_457239216"


# ==================== –ü–û–ò–°–ö ==================== #

@bot.on.message(text="–ì—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
async def start_search_handler(ans: Message):
    """–í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    if ans.payload:
        await prep_and_group_search.start_search(bot=bot, ans=ans, state=SuperStates, storage=storage)
    else:
        await ans.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üòâ')



@bot.on.message(state=SuperStates.SEARCH)
async def search_handler(ans: Message):
    """–°—Ç–µ–π—Ç –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    await prep_and_group_search.search(bot=bot, ans=ans, storage=storage)


@bot.on.message(text="–ê—É–¥–∏—Ç–æ—Ä–∏–∏")
async def start_aud_search_handler(ans: Message):
    """–í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    if ans.payload:
        await aud_search.start_search(bot=bot, ans=ans, state=SuperStates)
    else:
        await ans.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üòâ')



@bot.on.message(state=SuperStates.AUD_SEARCH)
async def aud_search_handler(ans: Message):
    """–°—Ç–µ–π—Ç –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await aud_search.search(bot=bot, ans=ans, storage=storage)


# ==================== –ö–û–ú–ê–ù–î–´ ==================== #

@bot.on.message(text=content_commands['text'])
async def start_message_handler(ans: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ù–∞—á–∞—Ç—å"""
    chat_id = ans.from_id
    await commands.start(ans=ans, chat_id=chat_id, storage=storage)
    statistics.add(action='start', storage=storage, tz=TZ_IRKUTSK)


@bot.on.message(text=['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'])
async def registration_handler(ans: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
    chat_id = ans.from_id
    await commands.registration(ans=ans, chat_id=chat_id, storage=storage)
    statistics.add(action='reg', storage=storage, tz=TZ_IRKUTSK)


@bot.on.message(text=content_map['text'])
async def show_map_handler(ans: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ö–∞—Ä—Ç–∞"""
    chat_id = ans.from_id
    user = storage.get_vk_user(chat_id=chat_id)
    if not user:
        user = []
    if len(user) == 6:
        await commands.show_map(ans=ans, photo_vk_name=map_image)
    else:
        await ans.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üòâ')

    statistics.add(action='map', storage=storage, tz=TZ_IRKUTSK)


@bot.on.message(text=['–ê–≤—Ç–æ—Ä—ã', '–∞–≤—Ç–æ—Ä—ã'])
async def authors_handler(ans: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ê–≤—Ç–æ—Ä—ã"""
    chat_id = ans.from_id
    user = storage.get_vk_user(chat_id=chat_id)
    if not user:
        user = []
    if len(user) == 6:
        await commands.authors(ans=ans)
    else:
        await ans.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üòâ')
    statistics.add(action='authors', storage=storage, tz=TZ_IRKUTSK)

@bot.on.message(text=['–ü–æ–¥—Å–∫–∞–∑–∫–∞', '–ø–æ–¥—Å–∫–∞–∑–∫–∞'])
async def tip_handler(ans: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ü–æ–¥—Å–∫–∞–∑–∫–∞"""
    chat_id = ans.from_id
    user = storage.get_vk_user(chat_id=chat_id)
    if not user:
        user = []
    if len(user) == 6:
        await commands.tip(ans=ans)
    else:
        await ans.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üòâ')
    statistics.add(action='tip', storage=storage, tz=TZ_IRKUTSK)

@bot.on.message(text=['–ü–æ–º–æ—â—å', '–ø–æ–º–æ—â—å'])
async def tip_handler(ans: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ü–æ–º–æ—â—å"""
    chat_id = ans.from_id
    user = storage.get_vk_user(chat_id=chat_id)
    if not user:
        user = []
    if len(user) == 6:
        await commands.help(ans=ans)
    else:
        await ans.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üòâ')
    statistics.add(action='help', storage=storage, tz=TZ_IRKUTSK)

# ==================== –†–ê–°–ü–ò–°–ê–ù–ò–ï ==================== #

@bot.on.message(text=content_schedule['text'])
async def schedule_handler(ans: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if ans.payload:
        await schedule.get_schedule(ans=ans, storage=storage, tz=TZ_IRKUTSK)
    else:
        await ans.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üòâ')


# ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==================== #

@bot.on.message(text=content_main_menu_buttons['text'])
async def main_menu_buttons_handler(ans: Message):
    """–û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if ans.payload:
        await main_menu.processing_main_buttons(ans=ans, storage=storage, tz=TZ_IRKUTSK)
    else:
        await ans.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üòâ')


# ==================== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ==================== #

@bot.on.message(text=content_reminders['text'])
async def reminders_handler(ans: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    if ans.payload:
        await reminders.reminder_settings(ans=ans, storage=storage, tz=TZ_IRKUTSK)
    else:
        await ans.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üòâ')


# ==================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ==================== #

@bot.on.message(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
async def start_prep_reg_handler(ans: Message):
    """–í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    if ans.payload:
        await teacher_registration.start_prep_reg(bot=bot, ans=ans, state=SuperStates, storage=storage)
    else:
        await ans.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üòâ')


@bot.on.message(state=SuperStates.PREP_REG)
async def reg_prep_handler(ans: Message):
    """–°—Ç–µ–π—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    await teacher_registration.reg_prep(bot=bot, ans=ans, storage=storage)



@bot.on.message()  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
async def student_registration_handler(ans: Message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await student_registration.start_student_reg(ans=ans, storage=storage, tz=TZ_IRKUTSK)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot.run_forever()


if __name__ == "__main__":
    main()
